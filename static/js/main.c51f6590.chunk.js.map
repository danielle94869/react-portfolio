{"version":3,"sources":["pages/About/About.js","pages/Portfolio/Portfolio.js","pages/Contact/Contact.js","App.js","serviceWorker.js","index.js"],"names":["About","charset","name","content","rel","href","integrity","crossorigin","id","src","alt","className","Portfolio","target","Contact","Container","Row","Col","xs","Form","FormGroup","Label","for","Input","type","placeholder","Button","App","useState","isOpen","setIsOpen","Navbar","color","light","expand","NavbarBrand","NavbarToggler","onClick","Collapse","navbar","Nav","NavItem","NavLink","to","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6SA0BeA,G,MAxBD,WACZ,OACE,oCAEE,8BACE,0BAAMC,QAAQ,UACd,0BAAMC,KAAK,WAAWC,QAAQ,0CAC9B,2CACA,0BAAMC,IAAI,aAAaC,KAAK,wEAAwEC,UAAU,0EAA0EC,YAAY,eAItM,6BACE,yBAAKC,GAAG,QAAQC,IAAI,kBAAkBC,IAAI,eAE5C,wBAAIC,UAAU,aAAd,aACA,wDACA,gEACA,uBAAGA,UAAU,QAAb,iLCDSC,EAjBG,WAChB,OACE,oCACE,8BACE,0BAAMX,QAAQ,UACd,0BAAMC,KAAK,WAAWC,QAAQ,0CAC9B,2CACA,0BAAMC,IAAI,aAAaC,KAAK,wEAAwEC,UAAU,0EAA0EC,YAAY,eAGtM,uBAAGF,KAAK,6CAA6CQ,OAAO,UAA5D,sBACA,uBAAGR,KAAK,2DAA2DQ,OAAO,UAA1E,yBACA,uBAAGR,KAAK,MAAMQ,OAAO,UAArB,e,gECsCSC,EAvCC,WACd,OACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAG,KACN,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAOC,IAAI,gBAAX,SACA,kBAACC,EAAA,EAAD,CAAOC,KAAK,QAAQtB,KAAK,QAAQM,GAAG,eAAeiB,YAAY,wBAEjE,kBAACL,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAOC,IAAI,mBAAX,YACA,kBAACC,EAAA,EAAD,CAAOC,KAAK,WAAWtB,KAAK,WAAWM,GAAG,kBAAkBiB,YAAY,0BAE1E,kBAACC,EAAA,EAAD,iBAGJ,kBAACT,EAAA,EAAD,CAAKC,GAAG,KACN,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAOC,IAAI,QAAX,QACA,kBAACC,EAAA,EAAD,CAAOC,KAAK,OAAOtB,KAAK,OAAOM,GAAG,UAEpC,kBAACY,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAOC,IAAI,gBAAX,SACA,kBAACC,EAAA,EAAD,CAAOC,KAAK,QAAQtB,KAAK,QAAQM,GAAG,kBAEtC,kBAACY,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAOC,IAAI,mBAAX,YACA,kBAACC,EAAA,EAAD,CAAOC,KAAK,WAAWtB,KAAK,WAAWM,GAAG,qBAE5C,kBAACkB,EAAA,EAAD,sBCWGC,EAlCH,WAAO,IAAD,EACYC,oBAAS,GADrB,mBACTC,EADS,KACDC,EADC,KAIhB,OACE,kBAAC,IAAD,KACE,6BACE,kBAACC,EAAA,EAAD,CAAQC,MAAM,QAAQC,OAAK,EAACC,OAAO,MACjC,kBAACC,EAAA,EAAD,kBACA,kBAACC,EAAA,EAAD,CAAeC,QANR,kBAAMP,GAAWD,MAOxB,kBAACS,EAAA,EAAD,CAAUT,OAAQA,EAAQU,QAAM,GAC9B,kBAACC,EAAA,EAAD,CAAK7B,UAAU,UAAU4B,QAAM,GAC7B,kBAACE,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KAAS,kBAAC,IAAD,CAAM/B,UAAU,OAAOgC,GAAG,KAA1B,WAEX,kBAACF,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KAAS,kBAAC,IAAD,CAAM/B,UAAU,OAAOgC,GAAG,cAA1B,eAEX,kBAACF,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KAAS,kBAAC,IAAD,CAAM/B,UAAU,OAAOgC,GAAG,YAA1B,gBAKjB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW9C,IACjC,kBAAC,IAAD,CAAO6C,KAAK,aAAaC,UAAWlC,IACpC,kBAAC,IAAD,CAAOiC,KAAK,WAAWC,UAAWhC,QCpCxBiC,QACW,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbJC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c51f6590.chunk.js","sourcesContent":["import React from 'react'\n\nconst About = () => {\n  return (\n    <>\n\n      <head>\n        <meta charset='UTF-8' />\n        <meta name='viewport' content='width=device-width, initial-scale=1.0' />\n        <title>Document</title>\n        <link rel='stylesheet' href='https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css' integrity='sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u' crossorigin='anonymous' />\n\n      </head>\n\n      <div>\n        <img id='image' src='./Daniel-Le.JPG' alt='Daniel Le' />\n      </div>\n      <h1 className='display-4'>Daniel Le</h1>\n      <p>Fountain Valley, CA 92708</p>\n      <p>Email: lequangduc512014@gmail.com</p>\n      <p className='lead'>My name is Daniel Le. I am graduated from Coding Boot Camp University of California, Irvine. I love programming and I will try my best to get the experience in the field.</p>\n\n    </>\n  )\n}\n\nexport default About\n","import React from 'react'\n\nconst Portfolio = () => {\n  return (\n    <>\n      <head>\n        <meta charset='UTF-8' />\n        <meta name='viewport' content='width=device-width, initial-scale=1.0' />\n        <title>Document</title>\n        <link rel='stylesheet' href='https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css' integrity='sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u' crossorigin='anonymous' />\n\n      </head>\n      <a href='https://daniellehillman.github.io/Sensify/' target='_blank'>Project 1: Sensify</a>\n      <a href='https://dashboard.heroku.com/apps/cryptic-savannah-70126' target='_blank'>Project 2: TrActivity</a>\n      <a href='url' target='_blank'>Project 3</a>\n    </>\n  )\n}\n\nexport default Portfolio\n","import React from 'react'\nimport {\n  Button,\n  Form,\n  FormGroup,\n  Label,\n  Input,\n  FormText,\n  Container,\n  Row,\n  Col\n} from 'reactstrap'\n\nconst Contact = () => {\n  return (\n    <Container>\n      <Row>\n        <Col xs='6'>\n          <Form>\n            <FormGroup>\n              <Label for='exampleEmail'>Email</Label>\n              <Input type='email' name='email' id='exampleEmail' placeholder='with a placeholder' />\n            </FormGroup>\n            <FormGroup>\n              <Label for='examplePassword'>Password</Label>\n              <Input type='password' name='password' id='examplePassword' placeholder='password placeholder' />\n            </FormGroup>\n            <Button>Log In</Button>\n          </Form>\n        </Col>\n        <Col xs='6'>\n          <Form>\n            <FormGroup>\n              <Label for='name'>Name</Label>\n              <Input type='text' name='name' id='name' />\n            </FormGroup>\n            <FormGroup>\n              <Label for='exampleEmail'>Email</Label>\n              <Input type='email' name='email' id='exampleEmail' />\n            </FormGroup>\n            <FormGroup>\n              <Label for='examplePassword'>Password</Label>\n              <Input type='password' name='password' id='examplePassword' />\n            </FormGroup>\n            <Button>Register</Button>\n          </Form>\n        </Col>\n      </Row>\n    </Container>\n  )\n}\n\nexport default Contact\n","import React, { useState } from 'react'\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom'\nimport {\n  Collapse,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink,\n  UncontrolledDropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem,\n  NavbarText\n} from 'reactstrap'\nimport './App.css'\nimport About from './pages/About'\nimport Portfolio from './pages/Portfolio'\nimport Contact from './pages/Contact'\n\nconst App = () => {\n  const [isOpen, setIsOpen] = useState(false)\n\n  const toggle = () => setIsOpen(!isOpen)\n  return (\n    <Router>\n      <div>\n        <Navbar color='light' light expand='md'>\n          <NavbarBrand>Main Page</NavbarBrand>\n          <NavbarToggler onClick={toggle} />\n          <Collapse isOpen={isOpen} navbar>\n            <Nav className='mr-auto' navbar>\n              <NavItem>\n                <NavLink><Link className='link' to='/'>About</Link></NavLink>\n              </NavItem>\n              <NavItem>\n                <NavLink><Link className='link' to='/portfolio'>Portfolio</Link></NavLink>\n              </NavItem>\n              <NavItem>\n                <NavLink><Link className='link' to='/contact'>Contact</Link></NavLink>\n              </NavItem>\n            </Nav>\n          </Collapse>\n        </Navbar>\n        <Switch>\n          <Route exact path='/' component={About} />\n          <Route path='/portfolio' component={Portfolio} />\n          <Route path='/contact' component={Contact} />\n        </Switch>\n      </div>\n    </Router>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}